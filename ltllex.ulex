%defs (
  open Token
  type lex_result = Token.token
  val eof = fn () => Token.EOF
  fun unescape s = case (String.fromCString s) of NONE => s | SOME s' => s'
);

%name Lexer;
%states INITIAL ;

%let digit = [0-9];
%let char = [\u0020-\u007e];
%let letter = [a-zA-Z\u00c0-\u00ff] & [^\u00d7\u00f7];
%let space = [ \t\r\n];
%let apos = ['];
%let quot = ["];
%let backslash = [\\];

<INITIAL> "->" => (RArrow);
<INITIAL> "&" => (And);
<INITIAL> "|" => (Or);
<INITIAL> "U" => (U);
<INITIAL> "R" => (R);
<INITIAL> "W" => (W);
<INITIAL> "!" => (Not);
<INITIAL> "~" => (Not);
<INITIAL> "X" => (X);
<INITIAL> "F" => (F);
<INITIAL> "G" => (G);
<INITIAL> "true" => (True);
<INITIAL> "false" => (False);
<INITIAL> "(" => (LParen);
<INITIAL> ")" => (RParen);
<INITIAL> {letter} ({letter} | {digit} | "_" | "\u0027")* => (Ident yytext);
<INITIAL> {space}+ => (continue ());
